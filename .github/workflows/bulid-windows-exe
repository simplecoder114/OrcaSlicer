name: Build windows exe

on:
  push:
    branches:
     - main
     - release/*
    paths:
     - 'deps/**'
     - 'src/**'
     - '**/CMakeLists.txt'
     - 'version.inc'
     - 'localization/**'
     - 'resources/**'
     - ".github/workflows/build_*.yml"
     - 'flatpak/**'

  pull_request:
    branches:
     - main
     - release/*
    paths:
     - 'deps/**'
     - 'src/**'
     - '**/CMakeLists.txt'
     - 'version.inc'
     - ".github/workflows/build_*.yml"
     - 'build_linux.sh'
     - 'build_release_vs2022.bat'
     - 'build_release_macos.sh'
     - 'flatpak/**'

  workflow_dispatch: # allows for manual dispatch
    inputs:
      build-deps-only:
        description: 'Only build dependencies (bypasses caching)'
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
env:
  BOOST_VERSION: "1.78.0"       # 锁定Boost版本
  WINDOWS_SDK_VERSION: "10.0.18362.0"  # 指定兼容的SDK版本

jobs:
  build_all:
    name: Build All
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
          - os: windows-latest
          - os: macos-14
            arch: arm64
    uses: ./.github/workflows/build_check_cache.yml
    with:
      os: ${{ matrix.os }}
      arch: ${{ matrix.arch }}
      build-deps-only: ${{ inputs.build-deps-only || false }}
    secrets: inherit
    
    # ===================== 新增 Windows 专用修复步骤 =====================
    steps: 
      - name: Windows SDK and Boost Fixes
        if: matrix.os == 'windows-latest'
        run: |
          # 安装指定版本的Boost
          choco install -y boost-msvc-14.3 --version=$env:BOOST_VERSION --no-progress --ignore-dependencies
          
          # 设置环境变量
          echo "BOOST_ROOT=C:\local\boost_$($env:BOOST_VERSION.Replace('.','_'))" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_SYSTEM_VERSION=$env:WINDOWS_SDK_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 配置MSVC环境
          $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          cmd.exe /c "call `"$vsPath\VC\Auxiliary\Build\vcvars64.bat`" && set > env_vars.txt"
          Get-Content env_vars.txt | ForEach-Object { 
            if ($_ -match "^(.*?)=(.*)$") { 
              Write-Output "$($matches[1])=$($matches[2])" >> $env:GITHUB_ENV 
            }
          }
        shell: powershell
    # ===================== 结束新增步骤 =====================

  flatpak:
    name: "Flatpak"
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-47
      options: --privileged
      volumes:
        - /usr/local/lib/android:/usr/local/lib/android
        - /usr/share/dotnet:/usr/share/dotnet
        - /opt/ghc:/opt/ghc1
        - /usr/local/share/boost:/usr/local/share/boost1
    strategy:
      matrix:
        variant:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: aarch64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.variant.runner }}
    env:
      date:
      ver:
      ver_pure:
    steps:
    - name: "Remove unneeded stuff to free disk space"
      run:
        rm -rf /usr/local/lib/android/* /usr/share/dotnet/* /opt/ghc1/* "/usr/local/share/boost1/*"
    - uses: actions/checkout@v4
    - name: Get the version and date
      run: |
        ver_pure=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          ver="PR-${{ github.event.number }}"
        else
          ver=V$ver_pure
        fi
        echo "ver=$ver" >> $GITHUB_ENV
        echo "ver_pure=$ver_pure" >> $GITHUB_ENV
        echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
      shell: bash
    - uses: flathub-infra/flatpak-github-actions/flatpak-builder@master
      with:
        bundle: OrcaSlicer-Linux-flatpak_${{ env.ver }}_${{ matrix.variant.arch }}.flatpak
        manifest-path: flatpak/io.github.softfever.OrcaSlicer.yml
        cache: true
        arch: ${{ matrix.variant.arch }}
        upload-artifact: false
    - name: Upload artifacts Flatpak
      uses: actions/upload-artifact@v4
      with:
        name: OrcaSlicer-Linux-flatpak_${{ env.ver }}_${{ matrix.variant.arch }}.flatpak
        path: '/__w/OrcaSlicer/OrcaSlicer/OrcaSlicer-Linux-flatpak_${{ env.ver }}_${{ matrix.variant.arch }}.flatpak'
    - name: Deploy Flatpak to nightly release
      if: ${{github.ref == 'refs/heads/main'}}
      uses: WebFreak001/deploy-nightly@v3.2.0
      with:
        upload_url: https://uploads.github.com/repos/SoftFever/OrcaSlicer/releases/137995723/assets{?name,label}
        release_id: 137995723
        asset_path: /__w/OrcaSlicer/OrcaSlicer/OrcaSlicer-Linux-flatpak_${{ env.ver }}_${{ matrix.variant.arch }}.flatpak
        asset_name: OrcaSlicer-Linux-flatpak_${{ env.ver }}_${{ matrix.variant.arch }}.flatpak
        asset_content_type: application/octet-stream
        max_releases: 1
