name: Build Windows Installer

on:
  push:
    branches:
     - main
     - release/*
    paths:
     - 'deps/**'
     - 'src/**'
     - '**/CMakeLists.txt'
     - 'version.inc'
     - 'localization/**'
     - 'resources/**'
     - 'build_release_vs2022.bat'

  pull_request:
    branches:
     - main
     - release/*
    paths:
     - 'deps/**'
     - 'src/**'
     - '**/CMakeLists.txt'
     - 'version.inc'
     - 'build_release_vs2022.bat'

  workflow_dispatch: # 允许手动触发

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
  
env:
  BOOST_VERSION: "1.78.0"       # 锁定Boost版本
  WINDOWS_SDK_VERSION: "10.0.18362.0"  # 指定兼容的SDK版本

jobs:
  build_windows:
    name: Build Windows Installer
    runs-on: windows-latest
    timeout-minutes: 90  # 延长超时时间

    steps:
      # 步骤1：检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src

      # 步骤2：安装Boost和设置环境
      - name: Install Boost and Set Environment
        run: |
          # 安装指定版本的Boost
          choco install -y boost-msvc-14.3 --version=$env:BOOST_VERSION --no-progress --ignore-dependencies
          
          # 计算Boost路径
          $boostVersion = "$env:BOOST_VERSION".Replace('.', '_')
          $boostRoot = "C:/local/boost_$boostVersion"
          echo "BOOST_ROOT=$boostRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_SYSTEM_VERSION=$env:WINDOWS_SDK_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 配置MSVC环境
          $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          cmd.exe /c "call `"$vsPath\VC\Auxiliary\Build\vcvars64.bat`" && set > env_vars.txt"
          Get-Content env_vars.txt | ForEach-Object { 
            if ($_ -match "^(.*?)=(.*)$") { 
              Write-Output "$($matches[1])=$($matches[2])" >> $env:GITHUB_ENV 
            }
          }
        shell: powershell

      # 步骤3：安装构建工具
      - name: Install Build Tools
        run: |
          choco install -y ninja cmake git python --no-progress
          python -m pip install conan

      # 步骤4：构建项目
      - name: Build Project
        run: |
          cd src
          cmake -B build -G Ninja ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_SYSTEM_VERSION=$env:CMAKE_SYSTEM_VERSION ^
            -DBOOST_ROOT="$env:BOOST_ROOT"
          cmake --build build --config Release --target package
        shell: cmd  # 使用cmd确保Windows命令正确执行

      # 步骤5：上传安装包
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Installer
          path: src/build/*.exe
          retention-days: 7
